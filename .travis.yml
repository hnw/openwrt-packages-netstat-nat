sudo: required
language: c
services: docker

env:
  global:
    - DOCKERHUB_IMG=yhnw/openwrt-sdk
    - PKG_REPOS_URL=https://github.com/hnw/openwrt-packages.git
    - PKG_NAME=netstat-nat
    - OPENWRT_GID=1000
    - GCS_ACCESS_KEY_ID=GOOGZU4AGJJUVQ4DLX52
    - GCS_BUCKET=hnw-gcs-bucket-for-travis
    - GCS_UPLOAD_DIR="$(basename ${TRAVIS_REPO_SLUG})-${TRAVIS_BUILD_NUMBER}"
    - secure: "RU5kWI8PiuRB9svBS/9opX6EBxe16Fdy2C82aBs3jkMgRw5QuQJeZeVQYIzPfOUDfAHsfTMmTxEn4N2HEUIOEJEj2ldftHaODfEesddnzTVtpoitq/qKeugjyp80w2EE0UakAiiB1nVVYBooD75edc0LjVVUpTrK3aXrTiSxnMp/pWDG7aB6YIzu/1022ZFbSxAjinNNMBXOwCLjf2Nu9pSHI8YLu2XB1/WXXDxdG29HWcyPPbmVv2cwGuZR+hNXD8VjdIBYdEaqU7itYY59GtmtlqCpv/m0y3HBA+/pCbehE5WKl4mfcLm0No5dzbbA/8lt3dBX2UKpsSjzwCdbYT+f8TBVuLBrwruOC2jCZLKJ8+5VgtNOhtN9MTEzleoIhbiUhR+A4RV4YVyC0eExiiWcuoEwuOMsB1KTMqfmLDCSijMUi8oa3xT065jqLprvSxZ0T+sadROQH6eXdEG5A9i156hT7enMHM4M2lMb3i0oOgEtZr4Q/sT4aSj49/W+R/t3gpo7I7rkqgng5Sprtq8xNEhDggmiyERj+Mi/VgbbD1OLXPGKD5eCUNhNwCP+lG9Aqq2KTQyIz3HBTheXvmpEY5Ta3+yMepuxqohJTJTfHWG9K9JHQ9laC9XjXTHAI0lor8T+8TyAWro2rAX2KQLRuPHqsKyQFRJAZVFZOgo="
    - VERBOSE=1
  matrix:
    - DOCKERHUB_TAG=15.05.1-ar71xx      BUILD_DIR=bin/ar71xx/packages        OUT_DIR=15.05.1/mips_24kc
    - DOCKERHUB_TAG=17.01-ar71xx        BUILD_DIR=bin/packages/mips_24kc     OUT_DIR=17.01/mips_24kc
    - DOCKERHUB_TAG=17.01-ramips-mt7620 BUILD_DIR=bin/packages/mipsel_24kc   OUT_DIR=17.01/mipsel_24kc
    - DOCKERHUB_TAG=17.01-bcm53xx       BUILD_DIR=bin/packages/arm_cortex-a9 OUT_DIR=17.01/arm_cortex-a9

script:
  - mkdir -p $PWD/pkgs
  - scripts/chgrp-for-docker.sh -g $OPENWRT_GID $PWD/pkgs
  - docker run --rm -u openwrt -v $PWD:/work ${DOCKERHUB_IMG}:${DOCKERHUB_TAG} /bin/bash /work/scripts/build.sh $PKG_NAME $BUILD_DIR /work /work/pkgs $OUT_DIR $VERBOSE
  - ls -la

after_failure:
  - if [[ -e pkgs/build.log ]] ; then tail -300 pkgs/build.log ; fi

before_deploy:
  - |
    if [[ -n ${TRAVIS_TAG} || -n ${TRAVIS_BRANCH} && ${TRAVIS_BRANCH} == "master" ]] ; then
        scripts/extract-encrypted-tar.sh -K $encrypted_287c788dbebe_key -iv $encrypted_287c788dbebe_iv secrets.tar.enc
        if [[ -e $HOME/.ssh ]] ; then
            mv $HOME/.ssh $HOME/.ssh.orig
        fi
        if [[ -n ${TRAVIS_TAG} ]] ; then
            echo "This build is triggered by tag: preparing deploy-key for pushing binary packages"
            mv .ssh_for_push_pkgs $HOME/.ssh
        else
            echo "We are on master branch: preparing deploy-key for pushing release tag"
            mv .ssh_for_push_tag $HOME/.ssh
        fi
    fi

deploy:
  - provider: releases
    api_key:
      secure: "AvyJs1n+96emhlfeI+DINLkIKAzz/KAcA7ixQGNjhdEete+RRPl0dDrvHrT6y/R3z99G02B9GsyeCkgGfLbb2/uZjubadn0x5h4GvGARk1v80SWyt4WNXOj9om3FszBl8rEoLA52U0QMfUOMXiruX39KYxoe+jZt4ue4frw10HxTNG27ZKHdRIryruWaQq8GsTje+6YRkj2xSTaZtY76QFKJ8rS3TH2QbIf2HFuKZDh2T9bk05cNf6NQn2e2jvn8LFD6HQg82W/lL8lsBoLeoRyMQeSRlInXdyiY3+o4uMWmttbzDvqC1GkABAceE7R2wSTI5uugVgTGlIkZ/gDzeiljVbGWIy9IK7er4Sr7s8dBXaIo6ncWKseRXSDdoT5C7AQJVQqr4LoVYfOdmhbTWD1Bm3MFJ/0EKA9akecxJc1hsSyCAdN/7KSiwGXCBkdldm3XtpDzu9tVUjAvscbGmwo6lauTZJl2pjOG9aMOs2tttlSiG8XmqYON0FN4dnzkzYffqSluGjoP8MeAJIHyzu1nbyyltERcEUidGRyrzgiYPqDNJInu0db72Rqg88eJJljlgVGLwDZqrz/qcdoxPXLXBCQ+D6h/YHdxpGzfyd+63LrzNk/4x3lwSAEdooQ02OiK69li/JfPKSCTiCZEm2afF3VXIGkIfhvjWHNp6cI="
    file_glob: true
    file: "pkgs/flattened/*.ipk"
    skip_cleanup: true
    on:
      tags: true
  - provider: gcs
    access_key_id: ${GCS_ACCESS_KEY_ID}
    secret_access_key: ${GCS_SECRET_ACCESS_KEY}
    bucket: ${GCS_BUCKET}
    skip_cleanup: true
    local-dir: pkgs/structured/
    upload-dir: ${GCS_UPLOAD_DIR}
    all_branches: true
  - provider: gcs
    access_key_id: ${GCS_ACCESS_KEY_ID}
    secret_access_key: ${GCS_SECRET_ACCESS_KEY}
    bucket: ${GCS_BUCKET}
    skip_cleanup: true
    local-dir: pkgs/structured/
    upload-dir: ${GCS_UPLOAD_DIR}
    on:
      tags: true

jobs:
  include:
    - if: branch = master
      stage: Push release tag
      script: skip
      deploy:
        - provider: script
          script: scripts/push-tag.sh
    - if: tag IS present
      stage: Publish binary packages to repos
      script:
        - git clone --branch=master ${PKG_REPOS_URL} ../repos
        - envsubst < .boto.in > $HOME/.boto
        - gsutil cp -r s3://${GCS_BUCKET}/${GCS_UPLOAD_DIR}/'*' ../repos
      deploy:
        - provider: script
          script: scripts/push-pkgs.sh ../repos
          on:
            tags: true
